/*
 *     Find Us: privacy oriented location tracker for your friends and family.
 *     Copyright (C) 2015 Dzmitry Lazerka dlazerka@gmail.com
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */

buildscript {
	repositories {
		jcenter()
	}

	dependencies {
	    // https://bintray.com/android/android-tools/com.android.tools.build.gradle
		classpath 'com.android.tools.build:gradle:2.1.2'

		// https://bintray.com/android/android-tools/com.google.gms.google-services/view
		classpath 'com.google.gms:google-services:3.0.0'
	}
}

apply plugin: 'com.android.application'

repositories {
	jcenter()
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))

def isCi = "true".equals(System.getenv("CI"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

// If you want to sign builds, you should create ./keystore.properties file in project root.
def keystorePropertiesFile = rootProject.file("android/keystore.properties")

android {
	compileSdkVersion 24
	buildToolsVersion '24.0.1'

	dexOptions {
        incremental true
		// Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
		preDexLibraries = preDexEnabled && !isCi
	}

    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        signingConfigs {
            release {
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    } else {
        println 'Keystore not found, not assembling signed APK: ' + keystorePropertiesFile
    }


	defaultConfig {
		applicationId 'me.lazerka.mf.android'
		minSdkVersion 21
		targetSdkVersion 24
		versionCode 1
		versionName 'first'
		multiDexEnabled true

		buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
		buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        // For Java 8.
        jackOptions {
            enabled true
        }

		// testInstrumentationRunner "me.lazerka.mf.android.TestRunner"
	}
	packagingOptions {
		exclude 'META-INF/LICENSE'
		exclude 'META-INF/NOTICE'
		exclude 'META-INF/LICENSE.txt'
		exclude 'META-INF/NOTICE.txt'
		exclude 'LICENSE.txt'
	}
	sourceSets {
		main {
			manifest.srcFile 'src/main/AndroidManifest.xml'
		}
		debug {
			manifest.srcFile 'src/debug/AndroidManifest.xml'
		}
	}
	buildTypes {
		release {
			minifyEnabled true
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    // Cannot put this file into proguard folder as well, because gradle build would fail.
					'project.pro',
					'proguard/acra.pro',
					'proguard/jackson.pro',
					'proguard/guava.pro',
					'proguard/rx-java.pro',
					'proguard/square-okhttp.pro',
					'proguard/square-okio.pro'
            buildConfigField 'String', 'BACKEND_ROOT', '"https://lazerka-mf.appspot.com"'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
		}
		debug {
			// Then we'd need to get additional OAuth keys, AndroidManifest etc.
			// applicationIdSuffix '.debug'
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'),
					'project.pro',
					'proguard/acra.pro',
					'proguard/jackson.pro',
					'proguard/guava.pro',
					'proguard/rx-java.pro',
					'proguard/square-okhttp.pro',
					'proguard/square-okio.pro'

            buildConfigField 'String', 'BACKEND_ROOT', '"http://192.168.0.6:8380"'
//            buildConfigField 'String', 'BACKEND_ROOT', '"http://10.0.2.2:8380"'
		}

	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
//	productFlavors {
//		remote {
//            buildConfigField 'String', 'BACKEND_ROOT', '"https://lazerka-mf.appspot.com"'
//		}
//		local {
//            buildConfigField 'String', 'BACKEND_ROOT', '"http://192.168.0.6:8380"'
//		}
//		emulator {
//            buildConfigField 'String', 'BACKEND_ROOT', '"http://10.0.2.2:8380"'
//		}
//	}
	lintOptions {
//		abortOnError false
		textReport true
		textOutput 'stdout'
		warning 'UnusedResources'
		warning 'ResourceType'

        // Invalid package reference in library; not included in Android: java.nio.file. Referenced from okio.Okio.
        warning 'InvalidPackage'

        // It suggests to replace hyphens in values/keys.xml.
        disable 'TypographyDashes'
	}
}

dependencies {
	def playServicesVersion = '9.2.1'

	compile project(':api')
	compile "com.google.android.gms:play-services-auth:$playServicesVersion"
	compile "com.google.firebase:firebase-messaging:$playServicesVersion"
	compile "com.google.android.gms:play-services-location:$playServicesVersion"
	compile "com.google.android.gms:play-services-maps:$playServicesVersion"
    compile "com.google.firebase:firebase-crash:$playServicesVersion"

	compile 'com.android.support:appcompat-v7:24.1.1'
	compile 'com.android.support:recyclerview-v7:24.1.1'
	compile 'com.android.support:multidex:1.0.1'

	compile 'com.squareup.okhttp:okhttp:2.6.0'

	// See ApiRequest on why we don't use Retrofit
//    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
//    compile 'com.squareup.retrofit:converter-jackson:2.0.0-beta2'
//    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'

	compile('ch.acra:acra:4.7.0') {
		exclude group: 'com.google.android'
	}
	compile 'io.reactivex:rxandroid:1.0.1'
	compile 'io.reactivex:rxjava:1.0.16'
	compile 'org.slf4j:slf4j-android:1.7.13'

	testCompile ('org.testng:testng:6.9.9') {
		exclude group: 'com.google.guava'
	}
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.mockito:mockito-all:1.10.19'

	androidTestCompile(
			'org.hamcrest:hamcrest-core:1.3',
			'org.hamcrest:hamcrest-integration:1.3',
	)

	//compile project(path: ':backend', configuration: 'android-endpoints')
}

// For some reason this must be at the end: http://stackoverflow.com/questions/34370603
apply plugin: 'com.google.gms.google-services'
